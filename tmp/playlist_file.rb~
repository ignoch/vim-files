class PlaylistFile
  PLAYLIST_PATH = "#{Rails.root}/public/playlists"

  def initialize(name)
    @buffer   = Array.new
    @main_dir = "#{PLAYLIST_PATH}/#{name}"
    @ext_dir  = "#{@main_dir}/EXTERIOR"
    @int_dir  = "#{@main_dir}/INTERIOR"
    @car_dir  = "#{@main_dir}/CARGADOR"
    @reg_dir  = "#{@main_dir}/REGISTRO"
    self.create_directories
  end

  def open
    raise "Playlist no existe" if !File.exist? @main_dir
    self.set_scope
  end

  def get_files
	if ItemStatus::EXTERIOR == @scope
	files = find_files(@ext_dir)
	elsif ItemStatus::INTERIOR == @scope
	files = find_files(@int_dir)
	elsif ItemStatus::CARGADOR == @scope   
	files = find_files(@car_dir)
	end
	files ||= Array.new
  end

  def get_dir
    @dest
  end

  def find_files(directory)
	files = Array.new
	Dir.chdir(directory)
	Dir.foreach('.') do |entry|
	   next if entry.match(/(^\.+)/)
	   files << "#{directory}/#{entry}"
	end
    files
  end
  
  def create_directories
    if !File.exist? @main_dir 
      FileUtils.mkdir(@main_dir) 
      FileUtils.mkdir(@ext_dir)
      FileUtils.mkdir(@int_dir)
      FileUtils.mkdir(@car_dir)
      FileUtils.mkdir(@reg_dir)
      return true
    end
    return false
  end

  def set_scope(scope)
	@scope    = scope
	@buffer   = Array.new
	if ItemStatus::EXTERIOR == @scope
	  @file = "#{@ext_dir}/lista.lst" 
	  @dest = "#{@ext_dir}"
	  return true
	end
	if ItemStatus::INTERIOR == @scope
	  @file = "#{@int_dir}/lista.lst"
	  @dest = "#{@int_dir}"
	  return true
	end
	if ItemStatus::CARGADOR == @scope
	  @file = "#{@car_dir}/lista.lst"
	  @dest = "#{@car_dir}"
	  return true
	end
	raise "Invalid Scope"
	return false
  end

  def set_reports
    @dest = "#{@reg_dir}"
  end

  def add_line(line)
    @buffer << line
  end

  def move_image(src)
    dest = "#{@dest}/#{@file_name}"
    FileUtils.cp(src,dest)
  end

  def valid_image_name(str_image_name)
    file_name  = str_image_name.split(".")
    @file_name = "#{file_name.first.slice(0..7)}.#{file_name.last}"
    @file_name
  end

  def save
    File.open(@file,"w+") do |file|
      @buffer.each do |line|
	file.puts line
      end
      file.close
      return true
    end
    return false
  end

  def is_updated?(time_update)
    debugger
    return false if time_update.nil? || !File.exist?(@file)
    if File.mtime(@file).to_i > time_update.to_i
      return true
    else
      return false 
    end   
  end

  def get_last_update
    File.mtime(@file)
  end

end
