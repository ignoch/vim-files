# coding: utf-8 
class CampaignsController < InheritedResources::Base
  authorize_resource :only => [:index, :edit, :delete] 
  layout "dashboard"
  add_breadcrumb 'Campañas', 'campaigns_path'
  respond_to :html, :js

  def index
    @campaigns = Campaign.accessible_by(current_ability)
  end

  def create
    create!(:notice => "Campaña creada con exito"){ campaigns_path }
  end

  def show
    redirect_to campaigns_path
  end

  def edit 
    add_breadcrumb 'Edicion Campaña', 'new_campaign_path' 
    @campaign = Campaign.find(params[:id])
  end

  def destroy
    destroy!(:notice => "Campaña eliminada con exito")
  end

  def update
    update!(:notice => "Campaña editada con exito"){ campaigns_path }
  end

  def get_equips
    @equips_asigned   = Equip.find_all_by_campaign_id(params[:campaign_id])
    @equips_unasigned = Equip.where("campaign_id IS NULL")
  end

  def get_groups_asigned
    @groups = Group.get_groups(params[:campaign_id]) 
    @groups_unasigned = Group.get_unasigned   
  end

  def asign
    add_breadcrumb 'Asignación de Campañas', 'asign_campaigns_path' 
    @groups = Group.get_unasigned 
  end

  def asign_groups
    @campaigns          = Campaign.all
    @groups_asigned     = Group.get_groups(1)
    @groups_unasigned   = Group.get_unasigned
  end

  def set_equips
    unless params[:campaign][:id].empty?
      @campaign = Campaign.find(params[:campaign][:id])
      unless params[:groups][:asigned].nil?
        params[:groups][:asigned].each do |group_id|
	group = Group.find(group_id) 
  	@campaign.groups << group
	group.asign_equips_to_campaign(@campaign)
  	@campaign.save
        end
      end
      unless params[:groups][:unasigned].nil?
        params[:groups][:unasigned].each do |group_id|
	group = Group.find(group_id) 
  	@campaign.groups.delete(group)
	group.remove_campaign_from_equips
  	@campaign.save
        end
      end
    end
    
    respond_to do |format|  
    format.html {
      flash[:notice] = "Asignacion de grupos realizada con exito."
      redirect_to campaigns_path 
    }
    end

  end

  def unasigned
    authorize! :list_campaign, :campaigns
    add_breadcrumb 'Listado de Campañas', 'campaigns_path' 
    @campaigns = Campaign.accessible_by(current_ability).unasigned
    render :index
  end

  def asigned
    authorize! :list_campaign, :campaigns
    add_breadcrumb 'Listado de Campañas', 'campaigns_path' 
    @campaigns = Campaign.accessible_by(current_ability).asigned
    render :index
  end

  def search
    add_breadcrumb 'Busqueda', '' 
    @campaigns = Campaign.search(params[:search])
    if @campaigns.empty?
      flash[:notice] = "No hay resultados con ese criterio de busqueda."
    end
    render :index
  end

  def get_groups
    @groups = Group.get_groups(params[:campaign])     
  end

  def save_groups
    @campaign = Campaign.find(params[:campaign])
    @campaign.groups << Group.find(params[:group])
    @campaign.save
  end

  def drop_groups
    group = Group.find(params[:group])
    @campaign = Campaign.find(params[:campaign])
    @campaign.groups.delete(group)
    @campaign.save
    @groups_unasigned = Group.get_unasigned
  end

  def record_restricted
      flash[:notice] = "No puede ser eliminada. Tiene Grupos y/o Equipos asignados."
      redirect_to edit_campaign_path(@campaign)
  end

  private :record_restricted

end                                                                 
